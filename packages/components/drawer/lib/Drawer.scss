$drawer-placement: (
	left: (
		wrapperLeft: 0,
		wrapperRight: auto,
		wrapperTop: 0,
		wrapperBottom: auto,
	),
	right: (
		wrapperLeft: auto,
		wrapperRight: 0,
		wrapperTop: 0,
		wrapperBottom: auto,
	),
	top: (
		wrapperLeft: 0,
		wrapperRight: auto,
		wrapperTop: 0,
		wrapperBottom: auto,
	),
	bottom: (
		wrapperLeft: 0,
		wrapperRight: auto,
		wrapperTop: auto,
		wrapperBottom: 0,
	),
);
$drawer-placement-translation: (
	top: (
		enter-from: (
			transform: translateY(-100%),
		),
		enter-active: (
			transition: transform 0.2s linear,
		),
		enter-to: (
			transform: translateY(0),
		),
		leave-from: (
			transform: translateY(0),
		),
		leave-active: (
			transition: transform 0.5s linear,
		),
		leave-to: (
			transform: translateY(-100%),
		),
	),
	bottom: (
		enter-from: (
			transform: translateY(100%),
		),
		enter-active: (
			transition: transform 0.2s linear,
		),
		enter-to: (
			transform: translateY(0),
		),
		leave-from: (
			transform: translateY(0),
		),
		leave-active: (
			transition: transform 0.5s linear,
		),
		leave-to: (
			transform: translateY(100%),
		),
	),
	left: (
		enter-from: (
			transform: translate3d(-100%, 0, 0),
		),
		enter-active: (
			transition: transform 0.2s linear,
		),
		enter-to: (
			transform: translate3d(0, 0, 0),
		),
		leave-from: (
			transform: translate3d(0, 0, 0),
		),
		leave-active: (
			transition: transform 0.5s linear,
		),
		leave-to: (
			transform: translate3d(-100%, 0, 0),
		),
	),
	right: (
		enter-from: (
			transform: translate3d(100%, 0, 0),
		),
		enter-active: (
			transition: transform 0.2s linear,
		),
		enter-to: (
			transform: translate3d(0, 0, 0),
		),
		leave-from: (
			transform: translate3d(0, 0, 0),
		),
		leave-active: (
			transition: transform 0.5s linear,
		),
		leave-to: (
			transform: translate3d(100%, 0, 0),
		),
	),
);
@each $key1, $value1 in $drawer-placement-translation {
	@each $key2, $value2 in $value1 {
		.v3-drawer-translate-#{$key1}-#{$key2} {
			@if map-has-key($map: $value2, $key: transition) {
				transition: map-get($map: $value2, $key: transition);
			}
			@if map-has-key($map: $value2, $key: transform) {
				transform: map-get($map: $value2, $key: transform);
			}
		}
	}
}

.v3-drawer {
	position: absolute;
	display: flex;
	flex-direction: column;
	box-sizing: border-box;
	height: 100%;
	background-color: #fff;

	@each $key, $value in $drawer-placement {
		&.is-#{$key} {
			left: map-get($map: $value, $key: wrapperLeft);
			right: map-get($map: $value, $key: wrapperRight);
			top: map-get($map: $value, $key: wrapperTop);
			bottom: map-get($map: $value, $key: wrapperBottom);
		}
		&.has-header {
			.v3-drawer__content {
				border-top: 1px solid $border-color-default;
			}
		}
		&.has-footer {
			.v3-drawer__content {
				border-bottom: 1px solid $border-color-default;
			}
		}
	}

	.v3-drawer__header,
	.v3-drawer__content,
	.v3-drawer__footer {
		overflow: auto;
	}

	.v3-drawer__content,
	.v3-drawer__footer {
		padding: $padding-large-2;
	}

	.v3-drawer__header {
		display: flex;
		justify-content: space-between;
		padding: $padding-medium $padding-large-2;
		.v3-drawer-header__title {
			h3 {
				margin: 0;
			}
		}
		.v3-drawer-header__close {
			font-size: 18px;
			cursor: pointer;
		}
	}
	.v3-drawer__content {
		flex: 1;
		padding: $padding-large-2;
	}
	.v3-drawer__footer {
		padding: $padding-large-2;
		.v3-drawer-footer__btns {
			display: flex;
			justify-content: flex-end;
			&.has-confirm.has-cancel {
				.v3-button:first-child {
					margin-right: $padding-medium;
				}
			}
		}
	}
}
